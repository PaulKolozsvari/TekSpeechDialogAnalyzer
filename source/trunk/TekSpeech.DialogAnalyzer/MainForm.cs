namespace TekSpeech.DialogAnalyzer
{
    #region Using Directives

    using Figlut.Server.Toolkit.Utilities;
    using Figlut.Server.Toolkit.Winforms;
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Data;
    using System.Diagnostics;
    using System.Drawing;
    using System.IO;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using System.Windows.Forms;
    using TekSpeech.DialogAnalyzer.Lib.Data;
    using TekSpeech.DialogAnalyzer.Lib.PDF;

    #endregion //Using Directives

    public partial class MainForm : BorderlessForm
    {
        #region Constructors

        public MainForm()
        {
            InitializeComponent();
            _logoFilePath = Path.Combine(Information.GetExecutingDirectory(), "TekSpeechPro_324x324.jpg");
            _waterMarkLogoFilePath = Path.Combine(Information.GetExecutingDirectory(), "DatasmithLogo.png");
        }

        #endregion //Constructors

        #region Fields

        private bool _forceClose;
        string _logoFilePath;
        string _waterMarkLogoFilePath;

        #endregion //Fields

        #region Properties

        public bool ForceClose
        {
            get { return _forceClose; }
            set { _forceClose = true; }
        }

        #endregion //Properties

        #region Methods

        private bool AllFieldsEntered(out string errorMessage)
        {
            if (string.IsNullOrEmpty(txtLogsDirectory.Text))
            {
                txtLogsDirectory.Focus();
                errorMessage = string.Format("Logs Directory not entered.");
                return false;
            }
            if (lstSearchVoiceCommandText.Items.Count < 1)
            {
                txtSearchVoiceCommandText.Focus();
                errorMessage = string.Format("No Voice Command Text entered.");
                return false;
            }
            //if (lstOriginatingVoiceCommandTextWords.Items.Count < 1)
            //{
            //    txtOriginatingVoiceCommandTextWords.Focus();
            //    errorMessage = string.Format("No Initiating Voice Command text entered.");
            //    return false;
            //}
            //if (lstSecondOriginatingVoiceCommandTextWords.Items.Count < 1)
            //{
            //    txtSecondOriginatingVoiceCommandTextWords.Focus();
            //    errorMessage = string.Format("No Previous Command Text entered.");
            //    return false;
            //}
            if (string.IsNullOrEmpty(txtCustomerName.Text))
            {
                txtCustomerName.Focus();
                errorMessage = string.Format("Customer Name not entered.");
                return false;
            }
            if (string.IsNullOrEmpty(txtSiteName.Text))
            {
                txtSiteName.Focus();
                errorMessage = string.Format("Site Name not entered.");
                return false;
            }
            if (string.IsNullOrEmpty(txtProjectOwner.Text))
            {
                txtProjectOwner.Focus();
                errorMessage = string.Format("Project Owner not entered.");
                return false;
            }
            if (string.IsNullOrEmpty(txtReportGeneratedBy.Text))
            {
                txtReportGeneratedBy.Focus();
                errorMessage = string.Format("Report Generated By not entered.");
                return false;
            }
            errorMessage = null;
            return true;
        }

        #endregion //Methods

        #region Event Handlers

        private void MainForm_Load(object sender, EventArgs e)
        {
        }

        private void MainForm_MouseDown(object sender, MouseEventArgs e)
        {
            base.BorderlessForm_MouseDown(sender, e);
        }

        private void MainForm_MouseMove(object sender, MouseEventArgs e)
        {
            base.BorderlessForm_MouseMove(sender, e);
        }

        private void MainForm_MouseUp(object sender, MouseEventArgs e)
        {
            base.BorderlessForm_MouseUp(sender, e);
        }

        private void MainForm_KeyUp(object sender, KeyEventArgs e)
        {
            this.OnKeyUp(e);
        }

        private void btnLogsDirectory_Click(object sender, EventArgs e)
        {
            if (opdDirectory.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                txtLogsDirectory.Text = opdDirectory.SelectedPath;
            }
        }

        private void btnAddSearchVoiceCommandText_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(txtSearchVoiceCommandText.Text))
            {
                txtSearchVoiceCommandText.Focus();
                UIHelper.DisplayError("Voice Command Text not entered.");
                return;
            }
            string searchVoiceCommandText = txtSearchVoiceCommandText.Text.ToLower();
            foreach (string s in lstSearchVoiceCommandText.Items)
            {
                if (s.ToLower().ToString() == searchVoiceCommandText)
                {
                    txtSearchVoiceCommandText.Focus();
                    UIHelper.DisplayError(string.Format("Voice Command Text {0} already added.", txtSearchVoiceCommandText.Text));
                    return;
                }
            }
            lstSearchVoiceCommandText.Items.Add(txtSearchVoiceCommandText.Text);
            txtSearchVoiceCommandText.Clear();
            txtSearchVoiceCommandText.Focus();
        }

        private void btnAddOriginatingVoiceCommandTextWords_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(txtOriginatingVoiceCommandTextWords.Text))
            {
                UIHelper.DisplayError("Initiating Command Text not entered.");
                txtOriginatingVoiceCommandTextWords.Focus();
                return;
            }
            string originatingVoiceCommandTextWord = txtOriginatingVoiceCommandTextWords.Text.ToLower();
            foreach (string s in lstOriginatingVoiceCommandTextWords.Items)
            {
                if (s.ToLower().ToString() == originatingVoiceCommandTextWord)
                {
                    txtOriginatingVoiceCommandTextWords.Focus();
                    UIHelper.DisplayError(string.Format("Initiating Command Text {0} already added.", txtOriginatingVoiceCommandTextWords.Text));
                    return;
                }
            }
            lstOriginatingVoiceCommandTextWords.Items.Add(txtOriginatingVoiceCommandTextWords.Text);
            txtOriginatingVoiceCommandTextWords.Clear();
            txtOriginatingVoiceCommandTextWords.Focus();
        }

        private void btnAddSecondOriginatingVoiceCommandTextWords_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(txtSecondOriginatingVoiceCommandTextWords.Text))
            {
                txtSecondOriginatingVoiceCommandTextWords.Focus();
                UIHelper.DisplayError("Previous Command text not entered.");
                return;
            }
            string secondOriginatingVoiceCommandTextWord = txtSecondOriginatingVoiceCommandTextWords.Text.ToLower();
            foreach (string s in lstSecondOriginatingVoiceCommandTextWords.Items)
            {
                if(s.ToLower() == secondOriginatingVoiceCommandTextWord)
                {
                    txtSecondOriginatingVoiceCommandTextWords.Focus();
                    UIHelper.DisplayError(string.Format("Initiating Command Text {0} already added.", txtSecondOriginatingVoiceCommandTextWords.Text));
                    return;
                }
            }
            lstSecondOriginatingVoiceCommandTextWords.Items.Add(txtSecondOriginatingVoiceCommandTextWords.Text);
            txtSecondOriginatingVoiceCommandTextWords.Clear();
            txtSecondOriginatingVoiceCommandTextWords.Focus();
        }

        private void btnRemoveSearchVoiceCommandText_Click(object sender, EventArgs e)
        {
            if (lstSearchVoiceCommandText.SelectedIndex < 0)
            {
                lstSearchVoiceCommandText.Focus();
                UIHelper.DisplayError("No Voice Command selected.");
                return;
            }
            lstSearchVoiceCommandText.Items.RemoveAt(lstSearchVoiceCommandText.SelectedIndex);
        }

        private void btnRemoveOriginatingVoiceCommandTextWords_Click(object sender, EventArgs e)
        {
            if (lstOriginatingVoiceCommandTextWords.SelectedIndex < 0)
            {
                lstOriginatingVoiceCommandTextWords.Focus();
                UIHelper.DisplayError("No Initiating Command Text selected.");
                return;
            }
            lstOriginatingVoiceCommandTextWords.Items.RemoveAt(lstOriginatingVoiceCommandTextWords.SelectedIndex);
        }

        private void btnRemoveSecondOriginatingVoiceCommandTextWords_Click(object sender, EventArgs e)
        {
            if (lstSecondOriginatingVoiceCommandTextWords.SelectedIndex < 0)
            {
                lstSecondOriginatingVoiceCommandTextWords.Focus();
                UIHelper.DisplayError("No Previous Command Text selected.");
                return;
            }
            lstSecondOriginatingVoiceCommandTextWords.Items.RemoveAt(lstSecondOriginatingVoiceCommandTextWords.SelectedIndex);
        }

        private void btnGenerateReport_Click(object sender, EventArgs e)
        {
            string errorMessage = null;
            if (!AllFieldsEntered(out errorMessage))
            {
                UIHelper.DisplayError(errorMessage);
                return;
            }
            if (!Directory.Exists(txtLogsDirectory.Text))
            {
                UIHelper.DisplayError(string.Format("Could not find directory {0}.", txtLogsDirectory.Text));
                return;
            }
            DateTime currentDate = DateTime.Now;
            string outputFileName = string.Format(
                "DatasmithSpeechAnalyzerReport_{0}_{1}_{2}-{3}-{4}.pdf",
                txtCustomerName.Text,
                txtSiteName.Text,
                currentDate.Year,
                currentDate.Month,
                currentDate.Day);
            svdReport.FileName = outputFileName;
            if (svdReport.ShowDialog() != System.Windows.Forms.DialogResult.OK)
            {
                return;
            }
            AnalyzerLogFileCache logFileCache = new AnalyzerLogFileCache(txtLogsDirectory.Text, true);
            List<string> searchVoiceCommandText = new List<string>();
            List<string> originatingVoiceCommandTextWords = new List<string>();
            List<string> secondOriginatingVoiceCommandTextWords = new List<string>();
            foreach (string s in lstSearchVoiceCommandText.Items)
            {
                searchVoiceCommandText.Add(s);
            }
            foreach (string s in lstOriginatingVoiceCommandTextWords.Items)
            {
                originatingVoiceCommandTextWords.Add(s);
            }
            foreach (string s in lstSecondOriginatingVoiceCommandTextWords.Items)
            {
                lstSecondOriginatingVoiceCommandTextWords.Items.Add(s);
            }
            AnalyzerUserReport report = new AnalyzerUserReport(logFileCache, searchVoiceCommandText, originatingVoiceCommandTextWords, secondOriginatingVoiceCommandTextWords);
            UserReportPdf pdf = new UserReportPdf(
                report,
                "Dialog Analyzer Report",
                _logoFilePath,
                _waterMarkLogoFilePath,
                txtCustomerName.Text,
                txtSiteName.Text,
                txtProjectOwner.Text,
                txtReportGeneratedBy.Text,
                true,
                true,
                true,
                true);
            pdf.SaveToFile(svdReport.FileName);
            Process p = new Process();
            p.StartInfo = new ProcessStartInfo(svdReport.FileName);
        }

        #endregion //Event Handlers
    }
}
